/-
The definition of CW complexes follows David W√§rn's suggestion at
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Do.20we.20have.20CW.20complexes.3F/near/231769080
-/

import Mathlib.Topology.ContinuousFunction.Basic
import Mathlib.Topology.Category.TopCat.Basic
import Mathlib.Topology.Category.TopCat.Limits.Products
import Mathlib.Topology.Category.TopCat.Limits.Pullbacks
import Mathlib.Topology.Order
import Mathlib.Topology.MetricSpace.Basic
import Mathlib.Topology.UnitInterval
import Mathlib.CategoryTheory.Limits.Shapes.Products
import Mathlib.CategoryTheory.Limits.Shapes.Pullbacks
import Mathlib.CategoryTheory.Category.Preorder
import Mathlib.Analysis.InnerProductSpace.PiL2 -- EuclideanSpace
import Mathlib.Init.Set

open CategoryTheory


namespace CWComplex
noncomputable section

def Sphere : ‚Ñ§ ‚Üí TopCat
  | (n : ‚Ñï) => TopCat.of <| Metric.sphere (0 : EuclideanSpace ‚Ñù <| Fin <| n + 1) 1
  | _       => TopCat.of Empty

def ClosedBall : ‚Ñ§ ‚Üí TopCat
  | (n : ‚Ñï) => TopCat.of <| Metric.closedBall (0 : EuclideanSpace ‚Ñù <| Fin n) 1
  | _       => TopCat.of Empty

notation:0 "ùïä "n => Sphere n
notation:0 "ùîª "n => ClosedBall n

def SphereInclusion (n : ‚Ñ§) : (ùïä n) ‚Üí (ùîª n + 1) :=
  match n with
  | Int.ofNat _   => fun ‚ü®pt, hpt‚ü© => ‚ü®pt, le_of_eq hpt‚ü©
  | Int.negSucc _ => Empty.rec

theorem continuous_sphereInclusion (n : ‚Ñ§) : Continuous (SphereInclusion n) :=
  match n with
  | Int.ofNat _ => ‚ü®by
      intro _ ‚ü®t, ht, ht'‚ü©
      rw [isOpen_induced_iff]
      use t, ht
      rw [ht'.symm]
      tauto‚ü©
  | Int.negSucc n => ‚ü®by tauto‚ü©

def BundledSphereInclusion (n : ‚Ñ§) : TopCat.of (ùïä n) ‚ü∂ TopCat.of (ùîª n + 1) :=
  ‚ü®SphereInclusion n, continuous_sphereInclusion n‚ü©

def SigmaSphereInclusion (n : ‚Ñ§) (cells : Type) :
    (Œ£ (_ : cells), ùïä n) ‚Üí (Œ£ (_ : cells), ùîª n + 1) :=
  Sigma.map id fun _ x => SphereInclusion n x

theorem continuous_sigmaSphereInclusion (n : ‚Ñ§) (cells : Type) :
    Continuous (SigmaSphereInclusion n cells) := by
  apply Continuous.sigma_map
  intro _
  apply continuous_sphereInclusion

def BundledSigmaSphereInclusion (n : ‚Ñ§) (cells : Type) :
    TopCat.of (Œ£ (_ : cells), ùïä n) ‚ü∂ TopCat.of (Œ£ (_ : cells), ùîª n + 1) :=
  ‚ü®SigmaSphereInclusion n cells, continuous_sigmaSphereInclusion n cells‚ü©

def SigmaAttachMap (X : TopCat) (n : ‚Ñ§) (cells : Type)
    (attach_maps : cells ‚Üí C(ùïä n, X)) :
    (Œ£ (_ : cells), ùïä n) ‚Üí X :=
  fun ‚ü®i, x‚ü© => attach_maps i x

theorem continuous_sigmaAttachMap (X : TopCat) (n : ‚Ñ§) (cells : Type)
    (attach_maps : cells ‚Üí C(ùïä n, X)) :
    Continuous (SigmaAttachMap X n cells attach_maps) := by
  apply continuous_sigma
  exact fun i => (attach_maps i).continuous_toFun

def BundledSigmaAttachMap (X : TopCat) (n : ‚Ñ§) (cells : Type)
    (attach_maps : cells ‚Üí C(ùïä n, X)) :
    TopCat.of (Œ£ (_ : cells), ùïä n) ‚ü∂ X :=
  ‚ü®SigmaAttachMap X n cells attach_maps, continuous_sigmaAttachMap X n cells attach_maps‚ü©

-- A type witnessing that X' is obtained from X by attaching n-cells
structure AttachCells (X X' : TopCat) (n : ‚Ñ§) where
  /- The index type over n-cells -/
  cells : Type
  attach_maps : cells ‚Üí C(ùïä n, X)
  iso_pushout : X' ‚âÖ Limits.pushout
    (BundledSigmaSphereInclusion n cells)
    (BundledSigmaAttachMap X n cells attach_maps)

end
end CWComplex



structure RelativeCWComplex (A : TopCat) where
  /- Skeleta -/
  -- might need this: https://math.stackexchange.com/questions/650279/pushout-from-initial-object-isomorphic-to-coproduct
  sk : ‚Ñ§ ‚Üí TopCat
  /- A is isomorphic to the (-1)-skeleton. -/
  iso_sk_neg_one : A ‚âÖ sk (-1)
  /- The (n + 1)-skeleton is obtained from the n-skeleton by attaching (n + 1)-cells. -/
  attach_cells : (n : ‚Ñ§) ‚Üí CWComplex.AttachCells (sk n) (sk (n + 1)) (n + 1)

abbrev CWComplex := RelativeCWComplex (TopCat.of Empty)



namespace CWComplex
noncomputable section

-- The inclusion map from X to X', given that X' is obtained from X by attaching n-cells
def AttachCellsInclusion (X X' : TopCat) (n : ‚Ñ§) (att : AttachCells X X' n) : X ‚ü∂ X'
  := @Limits.pushout.inr TopCat _ _ _ X
      (BundledSigmaSphereInclusion n att.cells)
      (BundledSigmaAttachMap X n att.cells att.attach_maps) _ ‚â´ att.iso_pushout.inv

-- The inclusion map from the n-skeleton to the (n+1)-skeleton of a CW-complex
def SkeletaInclusion {A : TopCat} (X : RelativeCWComplex A) (n : ‚Ñ§) : X.sk n ‚ü∂ X.sk (n + 1) :=
  AttachCellsInclusion (X.sk n) (X.sk (n + 1)) (n + 1) (X.attach_cells n)

-- The inclusion map from the n-skeleton to the m-skeleton of a CW-complex
def SkeletaInclusion' {A : TopCat} (X : RelativeCWComplex A)
    (n : ‚Ñ§) (m : ‚Ñ§) (n_le_m : n ‚â§ m) : X.sk n ‚ü∂ X.sk m :=
  if h : n = m then by
    rw [<- h]
    exact ùüô (X.sk n)
  else by
    have h' : n < m := Int.lt_iff_le_and_ne.mpr ‚ü®n_le_m, h‚ü©
    exact SkeletaInclusion X n ‚â´ SkeletaInclusion' X (n + 1) m h'
  termination_by Int.toNat (m - n)
  decreasing_by
    simp_wf
    rw [Int.toNat_of_nonneg (Int.sub_nonneg_of_le h')]
    linarith

def ColimitDiagram {A : TopCat} (X : RelativeCWComplex A) : ‚Ñ§ ‚•§ TopCat where
  obj := X.sk
  map := @fun n m n_le_m => SkeletaInclusion' X n m <| Quiver.Hom.le n_le_m
  map_id := by simp [SkeletaInclusion']
  map_comp := by
    let rec p (n m l : ‚Ñ§) (n_le_m : n ‚â§ m) (m_le_l : m ‚â§ l) (n_le_l : n ‚â§ l) :
        SkeletaInclusion' X n l n_le_l =
        SkeletaInclusion' X n m n_le_m ‚â´
        SkeletaInclusion' X m l m_le_l :=
      if hnm : n = m then by
        unfold SkeletaInclusion'
        aesop
      else by
        have h1 : n < m := Int.lt_iff_le_and_ne.mpr ‚ü®n_le_m, hnm‚ü©
        have h2 : n < l := by linarith
        unfold SkeletaInclusion'
        simp [hnm, Int.ne_of_lt h2]
        rcases em (m = l) with hml | hml
        . aesop
        congr
        rw [p (n + 1) m l h1 m_le_l h2]
        congr
        simp [hml]
        conv => lhs; unfold SkeletaInclusion'
        simp [hml]
      termination_by Int.toNat (l - n)
      decreasing_by
        simp_wf
        rw [Int.toNat_of_nonneg (Int.sub_nonneg_of_le h2)]
        linarith
    intro n m l n_le_m m_le_l
    have n_le_m := Quiver.Hom.le n_le_m
    have m_le_l := Quiver.Hom.le m_le_l
    exact p n m l n_le_m m_le_l (Int.le_trans n_le_m m_le_l)

-- The topology on a CW-complex.
def toTopCat {A : TopCat} (X : RelativeCWComplex A) : TopCat :=
  Limits.colimit (ColimitDiagram X)

instance : Coe CWComplex TopCat where coe X := toTopCat X


open unitInterval

-- def j0 {X : TopCat} : X ‚ü∂ TopCat.of (X √ó I) := ‚ü®fun x => (x, 0), Continuous.Prod.mk_left 0‚ü©
-- def prod_map {W X Y Z : TopCat} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) : TopCat.of (W √ó Y) ‚ü∂ TopCat.of (X √ó Z) :=
--   ‚ü®Prod.map f g, Continuous.prod_map f.continuous_toFun g.continuous_toFun‚ü©
-- def HomotopyExtensionProperty {A X : TopCat} (i : A ‚ü∂ X) : Prop :=
--   ‚àÄ Y : TopCat, ‚àÄ f : X ‚ü∂ Y, ‚àÄ H : TopCat.of (A √ó I) ‚ü∂ Y, i ‚â´ f = j0 ‚â´ H ‚Üí
--   ‚àÉ H' : TopCat.of (X √ó I) ‚ü∂ Y, f = j0 ‚â´ H' ‚àß H = prod_map i (ùüô (TopCat.of I)) ‚â´ H'

-- def j0 {X : Type} [TopologicalSpace X] : C(X, X √ó I) := ‚ü®fun x => (x, 0), Continuous.Prod.mk_left 0‚ü©

def HomotopyExtensionProperty {A X : Type} [TopologicalSpace A] [TopologicalSpace X] (i : C(A, X)) : Prop :=
  ‚àÄ Y : Type, [TopologicalSpace Y] ‚Üí ‚àÄ f : C(X, Y), ‚àÄ H : C(A √ó I, Y), f ‚àò i = H ‚àò (., 0) ‚Üí
  ‚àÉ H' : C(X √ó I, Y), f = H' ‚àò (., 0) ‚àß H = H' ‚àò Prod.map i id

theorem hep_sphereInclusion (n : ‚Ñ§) : HomotopyExtensionProperty (BundledSphereInclusion n) :=
--theorem hep_sphereInclusion (n : ‚Ñ§) : HomotopyExtensionProperty ‚ü®SphereInclusion n, continuous_sphereInclusion n‚ü© :=
  match n with
  | (n : ‚Ñï) => sorry
  | Int.negSucc n' => -- n = -(n' + 1)
    if h_neg_one : n' = 0 then by
      rw [h_neg_one]
      intro Y _ f H hcomp
      use ‚ü®fun (x, _) => f x, Continuous.fst' f.continuous_toFun‚ü© -- f ‚àò Prod.fst
      simp
      constructor
      . ext x
        simp
      ext ‚ü®x, _‚ü©
      tauto -- Empty.rec x
    else by
      have h_neg_one : n' > 0 := Nat.pos_of_ne_zero h_neg_one
      have h_neg_one‚ÇÅ : Int.negSucc n' < 0 := Int.negSucc_lt_zero n'
      have h_neg_one‚ÇÇ : Int.negSucc n' < 0 := Int.negSucc_lt_zero n'
      have h_neg_one' : Int.negSucc n' + 1 < 0 := by
        sorry
      intro Y _ f H hcomp
      -- have H' : Empty ‚Üí Y := Empty.rec
      -- have H' : (ùîª (Int.negSucc n)) ‚Üí Y := Empty.rec
      let H' : (ùîª Int.negSucc n') √ó I ‚Üí Y := fun (x, _) => Empty.rec x
      let H' : (ùîª Int.negSucc n' + 1) √ó I ‚Üí Y := by
        intro (x, _)
        unfold ClosedBall at x
        sorry
      sorry

theorem hep_sphereInclusion' (n : ‚Ñ§) : HomotopyExtensionProperty ‚ü®SphereInclusion n, continuous_sphereInclusion n‚ü© :=
  if h1 : n = -1 then by
    rw [h1]
    intro Y _ f H hcomp
    use ‚ü®fun (x, _) => f x, Continuous.fst' f.continuous_toFun‚ü© -- f ‚àò Prod.fst
    simp
    constructor
    . ext x
      simp
    ext ‚ü®x, _‚ü©
    tauto
  else if h2 : n + 1 < 0 then by
    have ‚ü®m, hm‚ü© := Int.eq_negSucc_of_lt_zero h2
    intro Y _ f H hcomp
    --rw [hm] at f
    let œÜ (n : ‚Ñï) : C(ùîª Int.negSucc n, Y) := ‚ü®Empty.rec, by tauto‚ü©
    let œÜ' (n : ‚Ñï) : C((ùîª Int.negSucc n) √ó I, Y) :=
      ‚ü®fun (x, _) => œÜ n x, Continuous.fst' (œÜ n).continuous_toFun‚ü©
    let H' : C((ùîª n + 1) √ó I, Y) := by rw [hm]; exact œÜ' m
    use H'
    constructor
    . ext x
      dsimp
      sorry
    ext ‚ü®x, z‚ü©
    simp
    sorry
  else by
    have h3 : n ‚â• 0 := by contrapose! h2; contrapose! h1; linarith
    sorry

#check ContinuousMap.liftCover -- gluing lemma

end
end CWComplex


-- variable {X : CWComplex}
-- #check (X : TopCat)
/- another implementation: -/


-- A type witnessing that X' is obtained from X by attaching n-cells
structure CW_aux (X X' : TopCat) (n : ‚Ñï) :=
(inclusion : X ‚ü∂ X')
(cells : Type)
-- should also have, for each i in cells a map ‚àÇD^n ‚ü∂ X, and
-- a homeomorphism between X' and the result of gluing these n-cells to X

structure CW_complex :=
(skeleta : ‚Ñï ‚Üí TopCat)
(foo : Œ† n, CW_aux (skeleta n) (skeleta (n+1)) n)

#check CW_complex
